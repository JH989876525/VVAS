..
   Copyright 2021 Xilinx, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

##########################
VVAS Meta Data Structures
##########################

This section covers various meta data structures defined by VVAS.


.. _vvas_inference_metadata:


***********************
VVAS Inference Metadata
***********************

The VVAS inference metadata (GstInferenceMeta) object holds information about the metadata produced by the machine learning (ML) inference acceleration software libraries. This metadata structure stores the inferred data generated at multiple levels of ML operation into a single structure in a hierarchical way. This data structure combines, and stores metadata generated by detection and classification models.

The GStreamer plug-ins can set and get inference metadata from the GstBuffer by using the `gst_buffer_add_meta ()` API and `gst_buffer_get_meta ()` API, respectively.

=================
GstInferenceMeta
=================               

.. c:struct:: GstInferenceMeta

   GstInferenceMeta is the root node of the inference metadata. GstInferencePrediction hosts the actual inference metadata.

**Definition**

::

  struct GstInferenceMeta {
    GstMeta meta;
    GstInferencePrediction *prediction;
  };

**Members**

``meta``
  Buffer metadata

``prediction``
  Contains all the predictions associated to this node

=======================
GstInferencePrediction
=======================                     

.. c:struct:: GstInferencePrediction

   This structure represents the inference data generated from the ML operation

**Definition**

::

  struct GstInferencePrediction {
    GstMiniObject base;
    GMutex mutex;
    GstBuffer *sub_buffer;
    VvasInferPrediction prediction;
    void *reserved_1;
    void *reserved_2;
    void *reserved_3;
    void *reserved_4;
    void *reserved_5;
  };

**Members**

``base``
  private base object

``mutex``
  mutex

``sub_buffer``
  A buffer created from the main buffer

``prediction``
  VVAS core inference structure

``reserved_1``
  for future extension

``reserved_2``
  for future extension

``reserved_3``
  for future extension

``reserved_4``
  for future extension

``reserved_5``
  for future extension

.. include:: ./vvas_infer_prediction.rst

===========================
GstInferenceClassification
===========================                          

.. c:struct:: GstInferenceClassification

   This structure stores the results of the ML operation by the classification network

**Definition**

::

  struct GstInferenceClassification {
    GstMiniObject base;
    GMutex mutex;
    VvasInferClassification classification;
  };

**Members**

``base``
  private base object

``mutex``
  mutex

``classification``
  VVAS core inference structure

.. include:: ./vvas_infer_classification.rst


.. _vvas_overlay_metadata:


***********************
VVAS Overlay Metadata
***********************

VVAS overlay metadata structure hold the information of geometric shapes and text need to be overlaid on video frames. VVAS overlay plugin parses the overlay metadata structures to overlay information on the frames. An intermediate plugin is required for converting metadata generated from upstream plugins like infer, segmentation or optical flow plugins to overlay metadata for displaying information on frames. Currently supported structures in gstvvasoverlaymeta are rectangles, text, lines, arrows, circles and polygons. For displaying text, text need to be display must be copied into the text structure.

The GStreamer plug-ins can set and get overlay metadata from the GstBuffer by using the gst_buffer_add_meta () API and gst_buffer_get_meta () API, respectively.

.. _GstOverlayMeta:

================
GstOverlayMeta
================

GstOverlayMeta structure holds VvasOverlayShapeInfo of vvas_core which intern stores the information of different geometric structures and text. The structural information of different shapes, VvasOverlayShapeInfo and GstOverlayMeta are as described below:


.. code-block::


			typedef enum  {
        ARROW_DIRECTION_START ,
        ARROW_DIRECTION_END,
        ARROW_DIRECTION_BOTH_ENDS
      } VvasOverlayArrowDirection;

      typedef struct {
        int32_t x;
        int32_t y;
      } VvasOverlayCoordinates;

      typedef struct {
        uint8_t red;
        uint8_t green;
        uint8_t blue;
        uint8_t alpha;
      } VvasOverlayColorData;

      typedef struct {
        uint32_t font_num;
        float font_size;
        VvasOverlayColorData font_color;
      } VvasOverlayFontData;

      typedef struct {
        VvasOverlayCoordinates points;
        uint32_t width;
        uint32_t height;
        uint32_t thickness;
        VvasOverlayColorData rect_color;
        uint32_t apply_bg_color;
        VvasOverlayColorData bg_color;
      } VvasOverlayRectParams;

      typedef struct {
        VvasOverlayCoordinates points;
        char * disp_text;
        uint32_t bottom_left_origin;
        VvasOverlayFontData text_font;
        uint32_t apply_bg_color;
        VvasOverlayColorData bg_color;
      } VvasOverlayTextParams;

      typedef struct {
        VvasOverlayCoordinates start_pt;
        VvasOverlayCoordinates end_pt;
        uint32_t thickness;
        VvasOverlayColorData line_color;
      } VvasOverlayLineParams;

      typedef struct {
        VvasOverlayCoordinates start_pt;
        VvasOverlayCoordinates end_pt;
        VvasOverlayArrowDirection arrow_direction;
        uint32_t thickness;
        float tipLength;
        VvasOverlayColorData line_color;
      } VvasOverlayArrowParams;

      typedef struct {
        VvasOverlayCoordinates center_pt;
        uint32_t radius;
        uint32_t thickness;
        VvasOverlayColorData circle_color;
      } VvasOverlayCircleParams;

      typedef struct {
        VvasList * poly_pts;
        uint32_t num_pts;
        uint32_t thickness;
        VvasOverlayColorData poly_color;
      } VvasOverlayPolygonParams;

      /**
      * GstVvasOverlayMeta:
      * @num_rects: number of bounding boxes
      * @num_text: number of text boxes
      * @num_lines: number of lines
      * @num_arrows: number of arrows
      * @num_circles: number of circles
      * @num_polys: number of polygons
      * @rect_params: structure for holding rectangles information
      * @text_params: structure for holding text information
      * @line_params: structure for holding lines information
      * @arrow_params: structure for holding arrows information
      * @circle_params: structure for holding circles information
      * @polygon_params: structure for holding polygons information
      */
      typedef struct {
        GstMeta meta;
        int num_rects;
        int num_text;
        int num_lines;
        int num_arrows;
        int num_circles;
        int num_polys;

        VvasList *rect_params;
        VvasList *text_params;
        VvasList *line_params;
        VvasList *arrow_params;
        VvasList *circle_params;
        VvasList *polygon_params;
      } VvasOverlayShapeInfo;

      typedef struct _GstVvasOverlayMeta GstVvasOverlayMeta;
      struct _GstVvasOverlayMeta {
        GstMeta meta;
 
        VvasOverlayShapeInfo shape_info;
      };


.. _vvas_optflow_metadata:

*************************
VVAS Opticalflow Metadata
*************************

VVAS optical flow metadata structure hold the information of motion of frame in x and y direction and object motion information. VVAS optical flow plugin set the optical flow meta data of frame. This metadata structure also supports storing of motion information in object level for further analysis by downstream plugins.  The GStreamer plug-ins can set and get optical flow metadata from the GstBuffer by using the gst_buffer_add_meta () API and gst_buffer_get_meta () API respectively.

================
 GstOptflowMeta
================

GstOptflowMeta stores the information of optical flow of frames and object motion information.


.. code-block::


      struct _vvas_obj_motinfo
      {
        float mean_x_displ;
        float mean_y_displ;
        float angle;
        float dist;
        char dirc_name[DIR_NAME_SZ];
        BoundingBox bbox;
      };


      /**
      * GstVvasOverlayMeta:
      * @num_objs: number of objects with motion information
      * @obj_mot_infos: list of objects
      * @x_displ: pointer to motion data of frame in x-direction
      * @y_displ: pointer to motion data of frame in y-directiont
      */
      struct _GstVvasOFMeta
      {
        GstMeta meta;

        guint num_objs;
        GList *obj_mot_infos;

        GstBuffer *x_displ;
        GstBuffer *y_displ;
      };



